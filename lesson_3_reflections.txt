When would you want to use a remote repository rather than keeping all your work
local?

    Remote repositories are useful to have a copy of our work in the cloud. There they can be shared and viewed by
    others. Also, we can have other people collaborate on our work with remote repos.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    We probably only want to pull if we know that the changes in the remote are things we want to appear on our local 
    repository. Others may accidently commit breaking changes, and we probably don't want to pull them unless
    we're certain they work.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Branches are local offshoots off our main/master branch. Clones are copies of repositories that can exist locally or remotely.
    Forks exist only on Github, and they are clones of a repo on the site. You should use branches when working on a 
    project to allow for experimenting and testing code without affecting the main branch. You should clone a repo when you
    build upon other's work and bring it locally to your computer to work on it. Forking is great to clone repos that you
    have change permissions to. You should clone them to your computer to work on them locally and push changes
    to your remote fork. 

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having the last known state of a remote branch is similar to regular branching. It allows us 
    to keep our work separate from what happened in the remote branch. This way we can tell 
    how far ahead we are of origin. We can examine changes between branches and we can merge
    them when necessary.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    The simplest way to collaborate would be to zip up files and send them directly to my collaborators. We 
    would also use Google Docs to track changes. Probably also Dropbox to pass around the files. It would be easier
    without having to learn a system like Git. It would be much harder keeping track of changes
    and making sure things didn't break all the time. Also with a large team, not having a central
    place for files would be a nightmare.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You would want to use a separate branch for many reasons. One is to work on experimental
    features that we are testing, without affecting master. Another, is to work or fix bugs. We can 
    ensure that our fixes work, before merging into master. Another reason, is to help with
    collaboration. We keep our work separate from others and only merge code bases when
    others have vetted our work. 
